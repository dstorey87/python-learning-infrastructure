pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'staging', 'prod'],
            description: 'Environment to deploy to'
        )
        booleanParam(
            name: 'RUN_TESTS',
            defaultValue: true,
            description: 'Run test suite before deployment'
        )
        booleanParam(
            name: 'DEPLOY_INFRASTRUCTURE',
            defaultValue: false,
            description: 'Deploy/update Terraform infrastructure'
        )
    }
    
    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        PROJECT_NAME = 'python-learning-portal'
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        DOCKER_BUILDKIT = '1'
        
        // HashiCorp Vault integration
        VAULT_ADDR = credentials('vault-addr')
        VAULT_TOKEN = credentials('vault-token')
        
        // AWS credentials from Vault
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    }
    
    stages {
        stage('Checkout') {
            parallel {
                stage('Infrastructure') {
                    steps {
                        dir('infrastructure') {
                            git branch: 'main', 
                                url: 'https://github.com/dstorey87/python-learning-infrastructure.git'
                        }
                    }
                }
                stage('Frontend') {
                    steps {
                        dir('frontend') {
                            git branch: 'main', 
                                url: 'https://github.com/dstorey87/python-learning-frontend.git'
                        }
                    }
                }
                stage('API') {
                    steps {
                        dir('api') {
                            git branch: 'main', 
                                url: 'https://github.com/dstorey87/python-learning-api.git'
                        }
                    }
                }
                stage('Auth') {
                    steps {
                        dir('auth') {
                            git branch: 'main', 
                                url: 'https://github.com/dstorey87/python-learning-auth.git'
                        }
                    }
                }
                stage('Executor') {
                    steps {
                        dir('executor') {
                            git branch: 'main', 
                                url: 'https://github.com/dstorey87/python-learning-executor.git'
                        }
                    }
                }
                stage('Shared') {
                    steps {
                        dir('shared') {
                            git branch: 'main', 
                                url: 'https://github.com/dstorey87/python-learning-shared.git'
                        }
                    }
                }
            }
        }
        
        stage('Get Secrets from Vault') {
            steps {
                script {
                    // Retrieve secrets from HashiCorp Vault
                    def secrets = [
                        [path: 'secret/python-learning-portal/${ENVIRONMENT}', engineVersion: 2, secretValues: [
                            [envVar: 'DATABASE_PASSWORD', vaultKey: 'database_password'],
                            [envVar: 'SUPABASE_URL', vaultKey: 'supabase_url'],
                            [envVar: 'SUPABASE_SERVICE_KEY', vaultKey: 'supabase_service_key'],
                            [envVar: 'STRIPE_SECRET_KEY', vaultKey: 'stripe_secret_key'],
                            [envVar: 'JWT_SECRET', vaultKey: 'jwt_secret']
                        ]]
                    ]
                    
                    withVault(configuration: [timeout: 60, vaultCredentialId: 'vault-token', vaultUrl: env.VAULT_ADDR], vaultSecrets: secrets) {
                        // Secrets are now available as environment variables
                        sh 'echo "Secrets loaded from Vault"'
                    }
                }
            }
        }
        
        stage('Build Shared Library') {
            steps {
                dir('shared') {
                    sh 'npm ci'
                    sh 'npm run build'
                    sh 'npm pack'
                }
            }
        }
        
        stage('Test') {
            when {
                params.RUN_TESTS
            }
            parallel {
                stage('Frontend Tests') {
                    steps {
                        dir('frontend') {
                            sh 'npm ci'
                            sh 'npm run test:ci'
                            sh 'npm run build'
                        }
                    }
                    post {
                        always {
                            publishTestResults testResultsPattern: 'frontend/coverage/junit.xml'
                            publishCoverage adapters: [coberturaAdapter('frontend/coverage/cobertura-coverage.xml')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                        }
                    }
                }
                stage('API Tests') {
                    steps {
                        dir('api') {
                            sh 'npm ci'
                            sh 'npm run test:ci'
                        }
                    }
                    post {
                        always {
                            publishTestResults testResultsPattern: 'api/coverage/junit.xml'
                        }
                    }
                }
                stage('Auth Tests') {
                    steps {
                        dir('auth') {
                            sh 'npm ci'
                            sh 'npm run test:ci'
                        }
                    }
                }
                stage('Executor Tests') {
                    steps {
                        dir('executor') {
                            sh 'python -m pytest --junitxml=test-results.xml tests/'
                        }
                    }
                    post {
                        always {
                            publishTestResults testResultsPattern: 'executor/test-results.xml'
                        }
                    }
                }
            }
        }
        
        stage('Build Images') {
            parallel {
                stage('Frontend Image') {
                    steps {
                        dir('frontend') {
                            script {
                                def image = docker.build("${ECR_REGISTRY}/${PROJECT_NAME}-frontend:${BUILD_NUMBER}")
                                docker.withRegistry("https://${ECR_REGISTRY}", 'ecr:us-east-1:aws-credentials') {
                                    image.push()
                                    image.push('latest')
                                }
                            }
                        }
                    }
                }
                stage('API Image') {
                    steps {
                        dir('api') {
                            script {
                                def image = docker.build("${ECR_REGISTRY}/${PROJECT_NAME}-api:${BUILD_NUMBER}")
                                docker.withRegistry("https://${ECR_REGISTRY}", 'ecr:us-east-1:aws-credentials') {
                                    image.push()
                                    image.push('latest')
                                }
                            }
                        }
                    }
                }
                stage('Auth Image') {
                    steps {
                        dir('auth') {
                            script {
                                def image = docker.build("${ECR_REGISTRY}/${PROJECT_NAME}-auth:${BUILD_NUMBER}")
                                docker.withRegistry("https://${ECR_REGISTRY}", 'ecr:us-east-1:aws-credentials') {
                                    image.push()
                                    image.push('latest')
                                }
                            }
                        }
                    }
                }
                stage('Executor Image') {
                    steps {
                        dir('executor') {
                            script {
                                def image = docker.build("${ECR_REGISTRY}/${PROJECT_NAME}-executor:${BUILD_NUMBER}")
                                docker.withRegistry("https://${ECR_REGISTRY}", 'ecr:us-east-1:aws-credentials') {
                                    image.push()
                                    image.push('latest')
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Deploy Infrastructure') {
            when {
                params.DEPLOY_INFRASTRUCTURE
            }
            steps {
                dir('infrastructure/terraform/environments/${ENVIRONMENT}') {
                    sh 'terraform init'
                    sh 'terraform plan -out=tfplan'
                    script {
                        if (params.ENVIRONMENT == 'prod') {
                            input message: 'Deploy to Production?', ok: 'Deploy'
                        }
                    }
                    sh 'terraform apply tfplan'
                }
            }
        }
        
        stage('Deploy Services') {
            steps {
                dir('infrastructure') {
                    script {
                        withVault(configuration: [timeout: 60, vaultCredentialId: 'vault-token', vaultUrl: env.VAULT_ADDR], vaultSecrets: [
                            [path: 'secret/python-learning-portal/${ENVIRONMENT}', engineVersion: 2, secretValues: [
                                [envVar: 'SUPABASE_URL', vaultKey: 'supabase_url'],
                                [envVar: 'STRIPE_SECRET_KEY', vaultKey: 'stripe_secret_key']
                            ]]
                        ]) {
                            sh """
                                ./scripts/deploy.sh ${ENVIRONMENT} ${BUILD_NUMBER}
                            """
                        }
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    def healthCheckUrl = ""
                    switch(params.ENVIRONMENT) {
                        case 'dev':
                            healthCheckUrl = "https://dev-api.python-learning-portal.com/health"
                            break
                        case 'staging':
                            healthCheckUrl = "https://staging-api.python-learning-portal.com/health"
                            break
                        case 'prod':
                            healthCheckUrl = "https://api.python-learning-portal.com/health"
                            break
                    }
                    
                    timeout(time: 5, unit: 'MINUTES') {
                        waitUntil {
                            script {
                                def response = httpRequest url: healthCheckUrl, validResponseCodes: '200'
                                return response.status == 200
                            }
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            slackSend(
                channel: '#deployments',
                color: 'good',
                message: "✅ Deployment successful: ${PROJECT_NAME} to ${ENVIRONMENT} (Build #${BUILD_NUMBER})"
            )
        }
        failure {
            slackSend(
                channel: '#deployments',
                color: 'danger',
                message: "❌ Deployment failed: ${PROJECT_NAME} to ${ENVIRONMENT} (Build #${BUILD_NUMBER})"
            )
        }
    }
}